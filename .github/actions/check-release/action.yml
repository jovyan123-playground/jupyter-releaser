name: "Draft Changelog"
description: "Create an automated changelog entry PR"
inputs:
  token:
    description: "GitHub access token"
    required: true
  changelog:
    description: "Changelog file"
    default: "CHANGELOG.md"
    required: false
runs:
  using: "composite"
  steps:
    - shell: bash
      id: draft-release
      run: |
        set -eux

        # Set up env variables
        export GITHUB_ACCESS_TOKEN=${{ inputs.token }}
        export RH_REPOSITORY=${GITHUB_REPOSITORY}
        export RH_VERSION_SPEC=0.0.1a0
        export RH_POST_VERSION_SPEC=0.1.0.dev0
        export RH_CHANGELOG=${{ inputs.changelog }}
        export RH_DRY_RUN=true
        if [ ! -z ${GITHUB_HEAD_REF} ]; then
          echo "Using GITHUB_HEAD_REF: ${GITHUB_HEAD_REF}"
          export RH_BRANCH=${GITHUB_HEAD_REF}
        else
          # e.g refs/head/foo or refs/tag/bar
          echo "Using GITHUB_REF: ${GITHUB_REF}"
          export RH_BRANCH=$(echo ${GITHUB_REF} | cut -d'/' -f 3)
        fi

        # Install release helper from test PYPI server
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple -q release-helper==0.9.0

        # Draft Changelog
        release-helper prep-git
        release-helper bump-version
        release-helper build-changelog
        release-helper draft-changelog
        cat ${RH_CHANGELOG}

        # Draft Release
        release-helper prep-git
        release-helper bump-version
        release-helper check-changelog
        release-helper check-links
        # Make sure npm comes before python in case it produces
        # files for the python package
        release-helper build-npm
        release-helper check-npm
        release-helper build-python
        release-helper check-python
        release-helper check-manifest
        release-helper tag-release
        release-helper draft-release

    - shell: bash
      id: publish-release
      run: |
        set -eux

        # Set up env variables
        export release_url=${{ steps.draft-release.outputs.release_url }}
        export GITHUB_ACCESS_TOKEN=${{ inputs.token }}
        export RH_REPOSITORY=${GITHUB_REPOSITORY}
        export RH_DRY_RUN=true
        export TWINE_USERNAME=${TWINE_USERNAME:-"__token__"}
        export TWINE_COMMAND=${TWINE_COMMAND:-"twine upload --skip-existing"}
        export TWINE_REPOSITORY_URL=${TWINE_REPOSITORY_URL:-"https://test.pypi.org/legacy/"}
        export RH_NPM_COMMAND=${NPM_COMMAND:-"npm publish --dry-run"}

        # Publish Release
        release-helper extract-release ${release_url}
        release-helper forwardport-changelog ${release_url}
        release-helper publish-release ${release_url}

        # Delete Draft Release
        release-helper delete-release ${release_url}
